# GraphQL Schema
type <%= schema.identifiers.singular.pascal %> {
<%_ schema.attributes.forEach((attr, index) => { _%>
<%_ if (attr.datatype === Datatype.STRING) { _%>
  <%= attr.identifiers.camel %>: String
<%_ } else if (attr.datatype === Datatype.TEXT) { _%>
  <%= attr.identifiers.camel %>: String
<%_ } else if (attr.datatype === Datatype.STRING_ARRAY) { _%>
  <%= attr.identifiers.camel %>: [String]
<%_ } else if (attr.datatype === Datatype.INTEGER) { _%>
  <%= attr.identifiers.camel %>: Number
<%_ } else if (attr.datatype === Datatype.FLOAT) { _%>
  <%= attr.identifiers.camel %>: Number
<%_ } else if (attr.datatype === Datatype.DOUBLE) { _%>
  <%= attr.identifiers.camel %>: Number
<%_ } else if (attr.datatype === Datatype.BOOLEAN) { _%>
  <%= attr.identifiers.camel %>: Boolean
<%_ } else if (attr.datatype === Datatype.JSON) { _%>
  <%= attr.identifiers.camel %>: Object,
<%_ } else if (attr.datatype === Datatype.DATE) { _%>
  <%= attr.identifiers.camel %>: Date,
<%_ } else if (attr.datatype === Datatype.TIME) { _%>
  <%= attr.identifiers.camel %>: Date
<%_ } else if (attr.datatype === Datatype.DATETIME) { _%>
  <%= attr.identifiers.camel %>: Date
<%_ } _%>
<%_ }) _%>
<%_ schema.relations.forEach((rel, index) => { _%>
<%_ if (rel.type === RelationType.BELONGS_TO) { _%>
<%= rel.identifiers.destination.alias.singular.pascal %> <%= rel.identifiers.destination.canonical.singular.pascal %>,
<%_ } else if (rel.type === RelationType.HAS_ONE) { _%>
<%= rel.identifiers.destination.alias.singular.pascal %>_id: <%= rel.identifiers.destination.canonical.singular.pascal %>,
<%_ } else if (rel.type === RelationType.HAS_MANY) { _%>
  <%= rel.identifiers.destination.alias.plural.pascal %>_id: [<%= rel.identifiers.destination.canonical.singular.pascal %>],
<%_ } _%>
<%_ }) _%>
}