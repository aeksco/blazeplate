import * as React from "react";
import classnames from "classnames";
import { Draggable } from "react-beautiful-dnd";
import { AttributeListItemLabel } from "./AttributeListItemLabel";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
    DATATYPE_META,
    AttributeAddon,
    AttributeInput,
    CreatedByValues,
} from "@codotype/core";
import { faTrashAlt, faLock } from "@fortawesome/free-solid-svg-icons";
import styled from "styled-components";

// // // //

// interface AttributeListItemProps {
//     attribute: Attribute;
//     onEditButtonClick: (attributeToBeEdited: Attribute) => void;
//     onRemoveButtonClick: (attributeToBeRemoved: Attribute) => void;
// }

// padding: 0.25rem 0.5rem
const StyledListItem = styled.li`
    cursor: grab;
    border-left: 3px solid #adb5bd !important;

    &.autoGenerated {
        border-left: 3px solid #02b875 !important;
    }

    &:hover {
        .controls {
            opacity: 1;
        }
    }

    &:last-child {
        border-bottom-left-radius: 0px;
        border-bottom-right-radius: 0px;
    }

    .controls {
        transition: opacity 0.25s ease-in;
        opacity: 0;
        .dropdown-toggle.btn.btn-sm {
            &:after {
                display: none;
            }
        }
    }
`;

/**
 * AttributeListItem
 * @param attribute
 * @param props.index
 * @param onClickEdit
 * @param onClickDelete
 */
export function AttributeListItem(props: {
    attribute: AttributeInput;
    addons: AttributeAddon[];
    index: number;
    onClickEdit: (attributeToBeEdited: AttributeInput) => void;
    onClickDelete: (attributeToDelete: AttributeInput) => void;
}) {
    const { attribute } = props;
    return (
        <Draggable draggableId={String(attribute.id)} index={props.index}>
            {provided => (
                <StyledListItem
                    className={classnames(
                        "list-group-item list-group-item-action py-1 px-2",
                        {
                            autoGenerated:
                                attribute.createdBy === CreatedByValues.plugin,
                        },
                    )}
                    onClick={() => {
                        // Don't allow editing if Attribute.locked is true
                        if (attribute.locked) {
                            return;
                        }
                        props.onClickEdit(attribute);
                    }}
                    ref={provided.innerRef}
                    {...provided.draggableProps}
                    {...provided.dragHandleProps}
                >
                    <div className="row flex items-center">
                        <div className="col-sm-10">
                            <AttributeListItemLabel
                                attribute={attribute}
                                addons={props.addons}
                                datatype={
                                    // @ts-ignore
                                    DATATYPE_META[attribute.datatype]
                                }
                            />
                        </div>

                        {attribute.locked && (
                            <div className="col-sm-2 text-right controls justify-end">
                                <span
                                    className=" badge bg-gray-500"
                                    title="This Attribute is auto-generated - it may not be edited or removed."
                                >
                                    {/* <i className="fa fa-fw fa-lock" /> */}
                                    <FontAwesomeIcon icon={faLock} />
                                </span>
                            </div>
                        )}

                        {!attribute.locked && (
                            <div className="col-sm-2 text-right controls">
                                <button
                                    className="btn btn-sm btn-outline-danger px-0 py-0"
                                    onClick={e => {
                                        e.stopPropagation();
                                        e.preventDefault();
                                        props.onClickDelete(attribute);
                                    }}
                                >
                                    <FontAwesomeIcon
                                        className="mx-2"
                                        icon={faTrashAlt}
                                    />
                                </button>
                            </div>
                        )}
                    </div>
                </StyledListItem>
            )}
        </Draggable>
    );
}
